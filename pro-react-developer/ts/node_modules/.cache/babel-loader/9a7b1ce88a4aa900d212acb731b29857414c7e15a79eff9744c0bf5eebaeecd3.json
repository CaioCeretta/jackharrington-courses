{"ast":null,"code":"var _jsxFileName = \"/home/jorge/Estudos/Youtube/jack-harrington-courses/pro-react-developer/src/pages/UseEffectMistakes-1.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n\n/*\n  Rules\n  1 - always use the setter for the useState, you never want to set the value directly\n  2 - Always put a dependency array on useEffect, useCallback, useMemo\n  3 - To run use effect only once use an empty array\n  4 - Don't depend on data you fetch in the useEffect, it will cause an infinite loop\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UseEffectMistakes1() {\n  _s();\n  const [numbers, setNumbers] = useState([]);\n  useEffect(() => {\n    fetch(\"/numbers.json\").then(res => res.json()).then(data => {\n      setNumbers(data);\n    });\n  }, []);\n  const addOne = () => {\n    setNumbers([...numbers, numbers.length + 1]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Numbers: \", JSON.stringify(numbers)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add One\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(UseEffectMistakes1, \"NmavSJTOsQ6NXMSrAkWcN9okJRA=\");\n_c = UseEffectMistakes1;\nvar _c;\n$RefreshReg$(_c, \"UseEffectMistakes1\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","UseEffectMistakes1","_s","numbers","setNumbers","fetch","then","res","json","data","addOne","length","children","JSON","stringify","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jorge/Estudos/Youtube/jack-harrington-courses/pro-react-developer/src/pages/UseEffectMistakes-1.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n/*\n  Rules\n  1 - always use the setter for the useState, you never want to set the value directly\n  2 - Always put a dependency array on useEffect, useCallback, useMemo\n  3 - To run use effect only once use an empty array\n  4 - Don't depend on data you fetch in the useEffect, it will cause an infinite loop\n*/\n\nexport default function UseEffectMistakes1() {\n  const [numbers, setNumbers] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/numbers.json\")\n      .then((res) => res.json())\n      .then((data) => {\n        setNumbers(data);\n      });\n  }, []);\n\n  const addOne = () => {\n    setNumbers([...numbers, numbers.length + 1])\n  }\n\n  return (\n    <div>\n      <div>Numbers: {JSON.stringify(numbers)}</div>\n      <button>Add One</button>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AANA,SAAAC,MAAA,IAAAC,OAAA;AAQA,eAAe,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC3C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACdO,KAAK,CAAC,eAAe,CAAC,CACnBC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACdL,UAAU,CAACK,IAAI,CAAC;IAClB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBN,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAEA,OAAO,CAACQ,MAAM,GAAG,CAAC,CAAC,CAAC;EAC9C,CAAC;EAED,oBACEX,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,GAAK,WAAS,EAACC,IAAI,CAACC,SAAS,CAACX,OAAO,CAAC;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC7ClB,OAAA;MAAAY,QAAA,EAAQ;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEV;AAAChB,EAAA,CArBuBD,kBAAkB;AAAAkB,EAAA,GAAlBlB,kBAAkB;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}