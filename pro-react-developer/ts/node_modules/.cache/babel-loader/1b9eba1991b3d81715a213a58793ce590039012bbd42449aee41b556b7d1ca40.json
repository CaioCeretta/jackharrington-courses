{"ast":null,"code":"var _jsxFileName = \"/home/jorge/Estudos/Youtube/jack-harrington-courses/pro-react-developer/src/pages/UseEffectMistakes-1.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\n\n/*\n  Rules\n  1 - always use the setter for the useState, you never want to set the value directly\n  2 - Always put a dependency array on useEffect, useCallback, useMemo\n  3 - To run use effect only once use an empty array\n  4 - Don't depend on data you fetch in the useEffect, it will cause an infinite loop\n  5 - Always add all the state you read from to the dependency array\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UseEffectMistakes1() {\n  _s();\n  const [numbers, setNumbers] = useState([]);\n  useEffect(() => {\n    fetch(\"/numbers.json\").then(res => res.json()).then(data => {\n      setNumbers(data.numbers);\n    });\n  }, []);\n  console.log(typeof numbers);\n  const addOne = useCallback(() => {\n    setNumbers(currentNumbers => [...currentNumbers, currentNumbers.length + 1]);\n  }, []);\n  const sum = useMemo(() => numbers.reduce((acc, val) => acc + val, 0), [numbers]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Numbers: \", JSON.stringify(numbers)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Sum: \", sum]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addOne,\n      children: \"Add One\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(UseEffectMistakes1, \"fSHwEqeSm6ScqIz/EVJVyK0iJqc=\");\n_c = UseEffectMistakes1;\nvar _c;\n$RefreshReg$(_c, \"UseEffectMistakes1\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","jsxDEV","_jsxDEV","UseEffectMistakes1","_s","numbers","setNumbers","fetch","then","res","json","data","console","log","addOne","currentNumbers","length","sum","reduce","acc","val","children","JSON","stringify","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/jorge/Estudos/Youtube/jack-harrington-courses/pro-react-developer/src/pages/UseEffectMistakes-1.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from \"react\";\n\n/*\n  Rules\n  1 - always use the setter for the useState, you never want to set the value directly\n  2 - Always put a dependency array on useEffect, useCallback, useMemo\n  3 - To run use effect only once use an empty array\n  4 - Don't depend on data you fetch in the useEffect, it will cause an infinite loop\n  5 - Always add all the state you read from to the dependency array\n*/\n\nexport default function UseEffectMistakes1() {\n  const [numbers, setNumbers] = useState<number[]>([]);\n\n\n  useEffect(() => {\n    fetch(\"/numbers.json\")\n      .then((res) => res.json())\n      .then((data) => { \n        setNumbers(data.numbers);\n      });\n  }, []);\n\n  console.log(typeof numbers)\n\n\n  const addOne = useCallback(() => {\n    setNumbers(currentNumbers => [...currentNumbers, currentNumbers.length + 1])\n  }, [])\n\n  const sum = useMemo(() => numbers.reduce((acc, val) => acc + val, 0), [numbers])\n\n  return (\n    <div>\n      <div>Numbers: {JSON.stringify(numbers)}</div>\n      <div>Sum: {sum}</div>\n      <button onClick={addOne}>Add One</button>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,SAAAC,MAAA,IAAAC,OAAA;AASA,eAAe,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC3C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAW,EAAE,CAAC;EAGpDC,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,eAAe,CAAC,CACnBC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACdL,UAAU,CAACK,IAAI,CAACN,OAAO,CAAC;IAC1B,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAENO,OAAO,CAACC,GAAG,CAAC,OAAOR,OAAO,CAAC;EAG3B,MAAMS,MAAM,GAAGf,WAAW,CAAC,MAAM;IAC/BO,UAAU,CAACS,cAAc,IAAI,CAAC,GAAGA,cAAc,EAAEA,cAAc,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC;EAC9E,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,GAAG,GAAGjB,OAAO,CAAC,MAAMK,OAAO,CAACa,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC,EAAE,CAACf,OAAO,CAAC,CAAC;EAEhF,oBACEH,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,GAAK,WAAS,EAACC,IAAI,CAACC,SAAS,CAAClB,OAAO,CAAC;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC7CzB,OAAA;MAAAmB,QAAA,GAAK,OAAK,EAACJ,GAAG;IAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrBzB,OAAA;MAAQ0B,OAAO,EAAEd,MAAO;MAAAO,QAAA,EAAC;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEV;AAACvB,EAAA,CA5BuBD,kBAAkB;AAAA0B,EAAA,GAAlB1B,kBAAkB;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}